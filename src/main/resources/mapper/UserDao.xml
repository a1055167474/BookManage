<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.SpringProjectDemo.dao.UserDao">

    <resultMap id="BaseResultMap" type="com.example.SpringProjectDemo.entity.User">
        <!--@Table user-->
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="account" column="account" jdbcType="VARCHAR"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="password" column="password" jdbcType="VARCHAR"/>
        <result property="phone" column="phone" jdbcType="VARCHAR"/>
        <result property="userRole" column="user_role" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="isDeleted" column="is_deleted" jdbcType="INTEGER"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="BaseResultMap">
        select
          id, account, name, password, phone, user_role, create_time, state, is_deleted
        from t_user
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="BaseResultMap">
        select
          id, account, name, password, phone, user_role, create_time, state, is_deleted
        from t_user
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="BaseResultMap">
        select
          id, account, name, password, phone, user_role, create_time, state ,is_deleted
        from t_user
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="account != null and account != ''">
                and account LIKE CONCAT('%',#{account},'%')
            </if>
            <if test="name != null and name != ''">
                and name LIKE CONCAT('%',#{name},'%')
            </if>
            <if test="phone != null and phone != ''">
                and phone LIKE CONCAT('%',#{phone},'%')
            </if>
            <if test="userRole != null">
                and user_role = #{userRole}
            </if>
            <if test="createTime != null">
                and create_time <![CDATA[ >= ]]> #{createTime}
            </if>
            <if test="endTime != null">
                and create_time <![CDATA[ <= ]]> #{endTime}
            </if>
            <if test="state != null">
                and state = #{state}
            </if>
            <if test="isDeleted != null">
                and is_deleted = #{isDeleted}
            </if>
        and is_deleted = 0
        </where>
        limit #{start}, #{size}
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into t_user(account, name, password, phone, user_role, create_time, state, is_deleted)
        values (#{account}, #{name}, #{password}, #{phone}, #{userRole}, #{createTime}, #{state}, #{isDeleted})
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update t_user
        <set>
            <if test="account != null and account != ''">
                account = #{account},
            </if>
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="password != null and password != ''">
                password = #{password},
            </if>
            <if test="phone != null and phone != ''">
                phone = #{phone},
            </if>
            <if test="userRole != null">
                user_role = #{userRole},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="state != null">
                state = #{state},
            </if>
            <if test="isDeleted != null">
                is_deleted = #{isDeleted},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from t_user where id = #{id}
    </delete>


    <select id="getUserByAccount" resultMap="BaseResultMap">
        select
            id, account, name, password, phone, user_role, create_time, state, is_deleted
        from t_user
        where account = #{account}
    </select>
    <select id="selectByUserId" resultType="com.example.SpringProjectDemo.entity.User">
        select id, account, name, password, phone, user_role, create_time, state, is_deleted
        from t_user
        where id = #{userId}
    </select>
    <select id="queryCount" resultType="java.lang.Integer">
        select
        count(*)
        from t_user
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="account != null and account != ''">
                and account LIKE CONCAT('%',#{account},'%')
            </if>
            <if test="name != null and name != ''">
                and name LIKE CONCAT('%',#{name},'%')
            </if>
            <if test="phone != null and phone != ''">
                and phone LIKE CONCAT('%',#{phone},'%')
            </if>
            <if test="userRole != null">
                and user_role = #{userRole}
            </if>
            <if test="createTime != null">
                and create_time <![CDATA[ >= ]]> #{createTime}
            </if>
            <if test="endTime != null">
                and create_time <![CDATA[ <= ]]> #{endTime}
            </if>
            <if test="state != null">
                and state = #{state}
            </if>
            <if test="isDeleted != null">
                and is_deleted = #{isDeleted}
            </if>
            and is_deleted = 0
        </where>
    </select>

    <select id="getInfoByIds" resultType="com.example.SpringProjectDemo.entity.User">
        select
        id, account, name, password, phone, user_role, create_time, state, is_deleted
        from t_user
        where id IN
        <foreach collection="userIds" close=")" index="index" item="item" open="(" separator=",">
            #{item}
        </foreach>
    </select>

</mapper>